// routes/dashboard/$serviceId.tsx
import { createFileRoute, redirect, defer } from "@tanstack/solid-router"
import { createEffect } from "solid-js"
import { setActiveDeck } from "@/data/utils/core"
import { getDueFSRSCards } from "@/features/supabase/db/utils"
import { textbooks } from "@/data/textbooks"
import { DashboardLayout } from "@/features/dashboard/components/layout/DashboardLayout"
import { ServiceContentArea } from "@/features/dashboard/components/content/service/ServiceContentArea"
import type { ServiceType } from "@/features/service-config/types"
import type { DeckSource, UserDeck } from "@/data/types"

const VALID_SERVICES = ["anki", "wanikani", "jpdb"] as const

export const Route = createFileRoute("/dashboard/$serviceId")({
  beforeLoad: ({ context, params }) => {
    if (!VALID_SERVICES.includes(params.serviceId as ServiceType)) {
      throw redirect({
        to: "/dashboard/$textbookId/$chapterSlug",
        params: { textbookId: "genki_1", chapterSlug: "chapter-0" },
      })
    }
    return {
      user: context.user,
    }
  },
  loader: async ({ context, params }) => {
    const { user } = context
    const serviceId = params.serviceId as ServiceType

    // Create a mock current deck for the service
    const currentDeck: UserDeck = {
      id: `${serviceId}-main`,
      slug: serviceId,
      title: serviceId.charAt(0).toUpperCase() + serviceId.slice(1),
      deckType: "user_deck" as const,
      learning_path_items: [],
      owner_id: user?.id || "",
      is_public: false,
      vocabulary_keys: [],
    }

    // Generate deck sources (textbook sources + user sources)
    // Service sources will be generated by the components using generateServiceSources()
    const textbookSources = Object.values(textbooks).map((tb) => ({
      id: tb.id,
      name: tb.short_name || tb.name,
      type: "textbook" as const,
      decks: tb.chapters,
      disabled: false,
    }))

    const userSources: DeckSource[] = user
      ? [
          {
            id: user.id,
            name: "My Decks",
            type: "user" as const,
            decks: [
              {
                id: "user-decks",
                slug: "default",
                title: "My Custom Decks",
                deckType: "user_deck" as const,
                learning_path_items: [],
                owner_id: user.id,
                is_public: false,
                vocabulary_keys: [],
              },
            ],
            disabled: false,
          },
        ]
      : []

    const deckSources = [...textbookSources, ...userSources]

    // Get due cards for the user (same as textbook route)
    const dueFSRSCardsPromise = user
      ? getDueFSRSCards(user.id)
      : Promise.resolve(null)

    // Mock service data for the ServiceContentArea
    const mockServiceData = {
      decks: generateMockServiceDecks(serviceId),
      stats: generateMockServiceStats(serviceId),
      activeDeckId: `${serviceId}-deck-1`,
    }

    return {
      user,
      serviceId,
      currentDeck,
      deckSources,
      wordHierarchyData: null, // Services don't have hierarchy data
      dueFSRSCards: defer(dueFSRSCardsPromise),
      serviceData: mockServiceData,
    }
  },
  component: RouteComponent,
})

function RouteComponent() {
  const loaderData = Route.useLoaderData()

  createEffect(() => {
    setActiveDeck("service", loaderData().serviceId, "default")
  })

  return (
    <DashboardLayout
      user={loaderData().user}
      dueFSRSCardsPromise={loaderData().dueFSRSCards}
      currentDeck={loaderData().currentDeck}
      deckSources={loaderData().deckSources}
      wordHierarchyData={loaderData().wordHierarchyData}
      // No textbookId/chapterSlug for service routes
    >
      <ServiceContentArea
        serviceId={loaderData().serviceId}
        serviceData={loaderData().serviceData}
      />
    </DashboardLayout>
  )
}

function generateMockServiceDecks(serviceId: ServiceType) {
  const decksByService = {
    anki: [
      {
        id: "anki-deck-1",
        name: "Japanese Core 2000",
        dueCards: 23,
        totalCards: 2000,
      },
      {
        id: "anki-deck-2",
        name: "Genki I Vocabulary",
        dueCards: 5,
        totalCards: 317,
      },
      {
        id: "anki-deck-3",
        name: "Kanji Recognition",
        dueCards: 12,
        totalCards: 500,
      },
      {
        id: "anki-deck-4",
        name: "Grammar Patterns",
        dueCards: 0,
        totalCards: 150,
      },
    ],
    wanikani: [
      {
        id: "wanikani-deck-1",
        name: "Level 1 Radicals",
        dueCards: 8,
        totalCards: 30,
      },
      {
        id: "wanikani-deck-2",
        name: "Level 1 Kanji",
        dueCards: 15,
        totalCards: 25,
      },
      {
        id: "wanikani-deck-3",
        name: "Level 2 Radicals",
        dueCards: 3,
        totalCards: 20,
      },
      {
        id: "wanikani-deck-4",
        name: "Level 2 Kanji",
        dueCards: 7,
        totalCards: 30,
      },
    ],
    jpdb: [
      {
        id: "jpdb-deck-1",
        name: "Most Common 1000",
        dueCards: 45,
        totalCards: 1000,
      },
      {
        id: "jpdb-deck-2",
        name: "Anime Vocabulary",
        dueCards: 12,
        totalCards: 800,
      },
      {
        id: "jpdb-deck-3",
        name: "News Articles",
        dueCards: 8,
        totalCards: 600,
      },
      {
        id: "jpdb-deck-4",
        name: "Daily Conversation",
        dueCards: 0,
        totalCards: 300,
      },
    ],
  }
  return decksByService[serviceId] || []
}

function generateMockServiceStats(serviceId: ServiceType) {
  return {
    totalDueCards: 40,
    studiedToday: 25,
    currentStreak: 12,
    accuracy: 85,
  }
}
